// modules/fileManager.js
const fs = require('fs-extra');
const path = require('path');
const os = require('os');
const pdf = require('pdf-parse'); // For PDF text extraction
const mammoth = require('mammoth'); // For DOCX text extraction
// const { exec } = require('child_process'); // For potential future use with textract or other CLI tools

// Base directory for all user-specific data, including attachments.
// This will be initialized by main.js
let USER_DATA_ROOT; 
let AGENT_DATA_ROOT; // Might be needed if agent config influences storage

function initializeFileManager(userDataPath, agentDataPath) {
    USER_DATA_ROOT = userDataPath;
    AGENT_DATA_ROOT = agentDataPath;
    console.log(`[FileManager] Initialized with USER_DATA_ROOT: ${USER_DATA_ROOT}`);
}

/**
 * Stores a file (from a source path or buffer) into the application's internal storage.
 * Returns an object with details about the stored file, including its internal path.
 */
async function storeFile(sourcePathOrBuffer, originalName, agentId, topicId, fileTypeHint = 'application/octet-stream') {
    if (!USER_DATA_ROOT) {
        console.error('[FileManager] USER_DATA_ROOT not initialized.');
        throw new Error('File manager not properly initialized.');
    }
    if (!agentId || !topicId) {
        console.error('[FileManager] agentId or topicId missing for storeFile.');
        throw new Error('Agent ID and Topic ID are required to store file.');
    }

    const topicAttachmentsDir = path.join(USER_DATA_ROOT, agentId, 'topics', topicId, 'attachments');
    await fs.ensureDir(topicAttachmentsDir);

    const timestamp = Date.now();
    // Sanitize originalName to prevent path traversal or invalid characters, though Date.now() helps uniqueness
    const safeOriginalName = originalName.replace(/[^a-zA-Z0-9_.-]/g, '_');
    const internalFileName = `${timestamp}_${safeOriginalName}`;
    const internalFilePath = path.join(topicAttachmentsDir, internalFileName);

    let fileSize = 0;

    if (typeof sourcePathOrBuffer === 'string') { // It's a source path
        console.log(`[FileManager] Storing file from path: ${sourcePathOrBuffer} to ${internalFilePath}`);
        await fs.copy(sourcePathOrBuffer, internalFilePath);
        const stats = await fs.stat(internalFilePath);
        fileSize = stats.size;
    } else if (Buffer.isBuffer(sourcePathOrBuffer)) { // It's a buffer
        console.log(`[FileManager] Storing file from buffer (original name: ${originalName}, type hint: ${fileTypeHint}) to ${internalFilePath}. This is typically used for pasted images or large text snippets converted to files.`);
        await fs.writeFile(internalFilePath, sourcePathOrBuffer);
        fileSize = sourcePathOrBuffer.length;
    } else {
        console.error('[FileManager] Invalid source type for storeFile. Must be a path string or a Buffer.');
        throw new Error('Invalid file source.');
    }

    // Determine MIME type more reliably if possible, for now use hint or default
    // TODO: Implement more robust MIME type detection (e.g., using 'file-type' library or based on extension)
    let mimeType = fileTypeHint;

    // If fileTypeHint is generic or missing, try to infer from file extension.
    // This relies on originalName (even if generated by the client-side for pasted data like images or text)
    // having a suitable extension (e.g., "pasted_image.png", "clipboard_text.txt").
    if (!mimeType || mimeType === 'application/octet-stream') {
        const ext = path.extname(originalName).toLowerCase();
        switch (ext) {
            case '.txt':
                mimeType = 'text/plain';
                break;
            case '.json':
                mimeType = 'application/json';
                break;
            case '.xml':
                mimeType = 'application/xml';
                break;
            case '.csv':
                mimeType = 'text/csv';
                break;
            case '.html':
                mimeType = 'text/html';
                break;
            case '.css':
                mimeType = 'text/css';
                break;
            case '.js':
            case '.mjs': // ECMAScript module file
                mimeType = 'application/javascript';
                break;
            case '.pdf':
                mimeType = 'application/pdf';
                break;
            case '.doc':
                mimeType = 'application/msword';
                break;
            case '.docx':
                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                break;
            case '.xls':
                mimeType = 'application/vnd.ms-excel';
                break;
            case '.xlsx':
                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
                break;
            case '.ppt':
                mimeType = 'application/vnd.ms-powerpoint';
                break;
            case '.pptx':
                mimeType = 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
                break;
            case '.jpg':
            case '.jpeg':
                mimeType = 'image/jpeg';
                break;
            case '.png':
                mimeType = 'image/png';
                break;
            case '.gif':
                mimeType = 'image/gif';
                break;
            case '.svg':
                mimeType = 'image/svg+xml';
                break;
            case '.mp3':
                mimeType = 'audio/mpeg';
                break;
            case '.wav':
                mimeType = 'audio/wav';
                break;
            case '.mp4':
                mimeType = 'video/mp4';
                break;
            case '.webm':
                mimeType = 'video/webm';
                break;
            case '.bat':
            case '.sh':
            case '.py':
            case '.java':
            case '.c':
            case '.cpp':
            case '.h':
            case '.hpp':
            case '.cs':
            case '.go':
            case '.rb':
            case '.php':
            case '.swift':
            case '.kt':
            case '.ts':
            case '.tsx':
            case '.jsx':
            case '.vue':
            case '.yml':
            case '.yaml':
            case '.toml':
            case '.ini':
            case '.log':
            case '.sql':
            case '.jsonc':
                mimeType = 'text/plain';
                break;
            // Add more common types as needed
            default:
                // If still unknown, keep the original hint or octet-stream
                mimeType = fileTypeHint || 'application/octet-stream';
        }
    }

    const attachmentData = {
        id: `attachment_${timestamp}_${Math.random().toString(36).substring(2, 9)}`, // Unique ID for the attachment
        name: originalName, // Original name for display
        internalFileName: internalFileName, // Name used in storage
        internalPath: `file://${internalFilePath}`, // Full file:// URL for renderer to use
        type: mimeType,
        size: fileSize,
        createdAt: timestamp,
        // base64Data: null, // Will be populated on demand or if it's an image/audio for VCP
        extractedText: null, // Will be populated by calling getTextContent below
    };

    // Attempt to extract text content right after storing the file
    try {
        const text = await getTextContent(attachmentData.internalPath, attachmentData.type);
        if (text !== null && typeof text === 'string') {
            attachmentData.extractedText = text;
            console.log(`[FileManager] Successfully extracted and stored text for ${attachmentData.name}, length: ${text.length}`);
        } else if (text === null) {
            console.log(`[FileManager] No text content extracted or supported for ${attachmentData.name} (type: ${attachmentData.type}).`);
        }
    } catch (error) {
        console.error(`[FileManager] Error extracting text content during storeFile for ${attachmentData.name}:`, error);
        // Do not throw here, let the file storage succeed even if text extraction fails
    }

    console.log('[FileManager] File stored (with attempted text extraction):', attachmentData);
    return attachmentData;
}

// Placeholder for future functions
async function getFileAsBase64(internalPath) {
    if (!internalPath.startsWith('file://')) {
        throw new Error('Invalid internal path format. Must be a file:// URL.');
    }
    const cleanPath = internalPath.substring(7);
    const fileBuffer = await fs.readFile(cleanPath);
    return fileBuffer.toString('base64');
}

async function getTextContent(internalPath, fileType) {
    let effectiveFileType = fileType;

    // If the provided fileType is generic or missing, try to infer from the path's extension
    if ((!effectiveFileType || effectiveFileType === 'application/octet-stream') && internalPath) {
        if (internalPath.startsWith('file://')) {
            const cleanPath = internalPath.substring(7); // Remove 'file://'
            const ext = path.extname(cleanPath).toLowerCase();
            switch (ext) {
                case '.txt':
                case '.md':
                case '.json':
                case '.xml':
                case '.csv':
                case '.html':
                case '.css':
                case '.js': // Some JS files can be treated as text
                case '.mjs': // ECMAScript module file
                case '.bat': // Batch file
                case '.sh': // Shell script
                case '.py': // Python
                case '.java': // Java
                case '.c': // C
                case '.cpp': // C++
                case '.h': // C/C++ header
                case '.hpp': // C++ header
                case '.cs': // C#
                case '.go': // Go
                case '.rb': // Ruby
                case '.php': // PHP
                case '.swift': // Swift
                case '.kt': // Kotlin
                case '.ts': // TypeScript
                case '.tsx': // TypeScript React
                case '.jsx': // JavaScript React
                case '.vue': // Vue.js Single File Component
                case '.yml': // YAML
                case '.yaml': // YAML
                case '.toml': // TOML
                case '.ini': // INI file
                case '.log': // Log file
                case '.sql': // SQL
                case '.jsonc': // JSON with comments
                    effectiveFileType = 'text/plain'; // Or more specific text types if needed
                    break;
                // Add other text-based extensions as needed
            }
        }
    }

    // Now use effectiveFileType for the check
    if (effectiveFileType && effectiveFileType.startsWith('text/')) {
        if (!internalPath.startsWith('file://')) {
            throw new Error('Invalid internalPath format. Must be a file:// URL.');
        }
        const cleanPath = internalPath.substring(7);
        try {
            console.log(`[FileManager] Reading text content for ${cleanPath} as UTF-8 (effective type: ${effectiveFileType})`);
            return await fs.readFile(cleanPath, 'utf-8');
        } catch (error) {
            console.error(`[FileManager] Error reading text content for ${cleanPath}:`, error);
            return null;
        }
    } else if (effectiveFileType === 'application/pdf') {
        if (!internalPath.startsWith('file://')) {
            throw new Error('Invalid internalPath format for PDF. Must be a file:// URL.');
        }
        const cleanPath = internalPath.substring(7);
        try {
            console.log(`[FileManager] Reading PDF content for ${cleanPath}`);
            const dataBuffer = await fs.readFile(cleanPath);
            const data = await pdf(dataBuffer);
            console.log(`[FileManager] Successfully extracted text from PDF ${cleanPath}, length: ${data.text.length}`);
            return data.text; // pdf-parse returns an object with a .text property
        } catch (error) {
            console.error(`[FileManager] Error reading or parsing PDF content for ${cleanPath}:`, error);
            return null;
        }
    } else if (effectiveFileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || effectiveFileType === 'application/msword') {
        if (!internalPath.startsWith('file://')) {
            throw new Error('Invalid internalPath format for DOCX/DOC. Must be a file:// URL.');
        }
        const cleanPath = internalPath.substring(7);
        try {
            console.log(`[FileManager] Reading DOCX/DOC content for ${cleanPath}`);
            // Mammoth expects a path or a buffer. Reading to buffer first.
            const dataBuffer = await fs.readFile(cleanPath);
            const result = await mammoth.extractRawText({ buffer: dataBuffer });
            // const result = await mammoth.convertToHtml({ path: cleanPath }); // Alternative: convert to HTML then strip tags
            console.log(`[FileManager] Successfully extracted text from DOCX/DOC ${cleanPath}, length: ${result.value.length}`);
            return result.value; // .value contains the raw text
        } catch (error) {
            console.error(`[FileManager] Error reading or parsing DOCX/DOC content for ${cleanPath}:`, error);
            return null;
        }
    }
    console.log(`[FileManager] getTextContent: File type '${effectiveFileType}' (original: '${fileType}') is not a supported text type, PDF, or DOCX/DOC for path '${internalPath}'. Returning null.`);
    return null;
}


module.exports = {
    initializeFileManager,
    storeFile,
    getFileAsBase64, // Exposing for now, might be internalized later
    getTextContent,   // Exposing for now
};